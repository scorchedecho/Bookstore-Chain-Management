/*
 *  Copyright 2024 scorchedE.C.H.O
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.scorchedecho.bookstore.controller;

import com.scorchedecho.bookstore.controller.model.BookstoreBookData;
import com.scorchedecho.bookstore.controller.model.BookstoreCustomerData;
import com.scorchedecho.bookstore.controller.model.BookstoreData;
import com.scorchedecho.bookstore.controller.model.BookstoreEmployeeData;
import com.scorchedecho.bookstore.service.BookstoreService;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

/**
 * Bookstore Controller class of the Bookstore application
 * <p>This class is used to handle all requests that come into the application.
 *
 * @author Ari
 * @since  2024-01-26
 */
@RestController
// the base path for all requests in this controller.
// for example, a request to http://localhost:8080/bookstore/{request ...}
@RequestMapping("/bookstore")
@Slf4j
public class BookstoreController {
  // inject service
  @Autowired
  private BookstoreService bookstoreService;

  /* *************************************
   * BOOKSTORE METHODS                   *
   * CRUD?: CREATE, READ, UPDATE, DELETE *
   * *************************************/

  /**
   * Create a new bookstore using the {@link BookstoreData} provided.
   *
   * @param bookstoreData the BookstoreData to create the new bookstore with
   * @return              the created bookstore's BookstoreData
   */
  // HTTP POST (CREATE) - http://localhost:8080/bookstore
  // Response code: 201 (CREATED)
  @PostMapping()
  @ResponseStatus(code = HttpStatus.CREATED)
  public BookstoreData createBookstore(@RequestBody BookstoreData bookstoreData) {
    log.info("Creating & inserting a new bookstore: " + bookstoreData); // log the request
    return bookstoreService.saveBookstore(bookstoreData); // save the bookstore
  }

  /**
   * Update an existing bookstore using the new {@link BookstoreData} provided.
   * <p>
   * The bookstore's ID is automatically generated by the database.
   * <p>
   * The BookstoreData is returned with the generated ID to the requester for reference
   * upon successful creation.
   *
   * @param bookstoreId   the ID of the bookstore to be updated
   * @param bookstoreData the updated BookstoreData
   * @return              the updated bookstore's BookstoreData
   */
  // HTTP PUT (UPDATE) http://localhost:8080/bookstore/{bookstoreId}
  @PutMapping("/{bookstoreId}")
  public BookstoreData updateBookstore(@PathVariable long bookstoreId, @RequestBody BookstoreData bookstoreData) {
    bookstoreData.setBookstoreId(bookstoreId); // set the bookstore's intended ID
    log.info("Updating bookstore with ID: " + bookstoreId); // log the request
    return bookstoreService.saveBookstore(bookstoreData); // save the bookstore
  }

  /**
   * Delete an existing bookstore.
   *
   * @param bookstoreId the ID of the bookstore to be deleted
   * @return            confirmation message
   */
  // HTTP DELETE (DELETE) http://localhost:8080/bookstore/{bookstoreId}
  @DeleteMapping("/{bookstoreId}")
  public Map<String, String> deleteBookstore(@PathVariable long bookstoreId) {
    log.info("Deleting bookstore with ID: " + bookstoreId); // log the request
    bookstoreService.deleteBookstore(bookstoreId); // delete the bookstore
    return Map.of("message", "Bookstore with ID: " + bookstoreId + " has been deleted successfully."); // return confirmation
  }

  /**
   * Get all bookstores and provide the user with a list of {@link BookstoreData}.
   *
   * @return a list of all bookstores
   */
  // HTTP GET (READ) http://localhost:8080/bookstore
  @GetMapping
  public List<BookstoreData> getAllBookstores() {
    return bookstoreService.getAllBookstores(); // get all and return
  }

  /**
   * Get a bookstore by its ID and provide the user with its {@link BookstoreData}.
   *
   * @param bookstoreId the ID of the bookstore to be retrieved
   * @return            the bookstore's BookstoreData
   */
  // HTTP GET (READ) http://localhost:8080/bookstore/{bookstoreId}
  @GetMapping("/{bookstoreId}")
  public BookstoreData getBookstoreById(@PathVariable long bookstoreId) {
    return bookstoreService.getBookstore(bookstoreId); // find and return
  }

  /* *************************************
   * BOOKSTORE EMPLOYEE METHODS          *
   * CRUD?: CREATE, READ, UPDATE, DELETE *
   * *************************************/

  /**
   * Create a new employee using the {@link BookstoreEmployeeData} provided.
   * <p>
   * The employee's ID is automatically generated by the database.
   * <p>
   * The BookstoreEmployeeData is returned with the generated ID to the requester for reference
   * upon successful creation.
   *
   * @param employeeData the BookstoreEmployeeData to create the new employee with
   * @return             the created employee's BookstoreEmployeeData
   */
  // HTTP POST (CREATE) - http://localhost:8080/bookstore
  // Response code: 201 (CREATED)
  @PostMapping("/{bookstoreId}/employee")
  @ResponseStatus(code = HttpStatus.CREATED)
  public BookstoreEmployeeData createEmployee(@PathVariable long bookstoreId, @RequestBody BookstoreEmployeeData employeeData) {
    log.info("Creating & inserting a new employee: " + employeeData); // log the request
    return bookstoreService.saveEmployee(bookstoreId, employeeData); // save the employee
  }

  /**
   * Update an existing employee using the new {@link BookstoreEmployeeData} provided.
   *
   * @param bookstoreId  the ID of the bookstore the employee works at
   * @param employeeId   the ID of the employee to be updated
   * @param employeeData the updated BookstoreEmployeeData
   * @return             the updated employee's BookstoreEmployeeData
   */
  // HTTP PUT (UPDATE) http://localhost:8080/bookstore/{bookstoreId}/employee/{employeeId}
  @PutMapping("/{bookstoreId}/employee/{employeeId}")
  public BookstoreEmployeeData updateEmployee(@PathVariable long bookstoreId, @PathVariable long employeeId, @RequestBody BookstoreEmployeeData employeeData) {
    employeeData.setEmployeeId(employeeId); // set the employee's intended ID
    log.info("Updating employee with ID: " + employeeId); // log the request
    return bookstoreService.saveEmployee(bookstoreId, employeeData); // save the employee
  }

  /**
   * Delete an existing employee.
   *
   * @param employeeId the ID of the employee to be deleted
   * @return           confirmation message
   */
  // HTTP DELETE (DELETE) http://localhost:8080/bookstore/{bookstoreId}/employee/{employeeId}
  @DeleteMapping("/{bookstoreId}/employee/{employeeId}")
  public Map<String, String> deleteEmployee(@PathVariable long bookstoreId, @PathVariable long employeeId) {
    log.info("Deleting employee with ID: " + employeeId); // log the request
    bookstoreService.deleteEmployee(bookstoreId, employeeId); // delete the employee
    return Map.of("message", "Employee with ID: " + employeeId + " has been deleted successfully."); // return confirmation
  }

  /**
   * Get all employees and provide the user with a list of {@link BookstoreEmployeeData}.
   *
   * @param bookstoreId the ID of the bookstore the employees work at
   * @return            a list of all employees
   */
  // HTTP GET (READ) http://localhost:8080/bookstore/{bookstoreId}/employee
  @GetMapping("/{bookstoreId}/employee")
  public List<BookstoreEmployeeData> getAllEmployeesByBookstoreId(@PathVariable long bookstoreId) {
    return bookstoreService.getAllEmployees(bookstoreId); // get all and return
  }

  /**
   * Get an employee by their ID and provide the user with their {@link BookstoreEmployeeData}.
   *
   * @param bookstoreId the ID of the bookstore the employee works at
   * @param employeeId  the ID of the employee to be retrieved
   * @return            the employee's BookstoreEmployeeData
   */
  // HTTP GET (READ) http://localhost:8080/bookstore/{bookstoreId}/employee/{employeeId}
  @GetMapping("/{bookstoreId}/employee/{employeeId}")
  public BookstoreEmployeeData getEmployeeById(@PathVariable long bookstoreId, @PathVariable long employeeId) {
    return bookstoreService.getEmployee(bookstoreId, employeeId); // find and return
  }

  /* *************************************
   * BOOKSTORE CUSTOMER METHODS          *
   * CRUD?: CREATE, READ, UPDATE         *
   * *************************************/

  /**
   * Create a new customer using the {@link BookstoreCustomerData} provided.
   * <p>
   * The customer's ID is automatically generated by the database.
   * <p>
   * The BookstoreCustomerData is returned with the generated ID to the requester for reference
   * upon successful creation.
   *
   * @param bookstoreId  the ID of the bookstore the customer shops at
   * @param customerData the BookstoreCustomerData to create the new customer with
   * @return             the created customer's BookstoreCustomerData
   */
  // HTTP POST (CREATE) - http://localhost:8080/bookstore
  // Response code: 201 (CREATED)
  @PostMapping("/{bookstoreId}/customer")
  @ResponseStatus(code = HttpStatus.CREATED)
  public BookstoreCustomerData createCustomer(@PathVariable long bookstoreId, @RequestBody BookstoreCustomerData customerData) {
    log.info("Creating & inserting a new customer: " + customerData); // log the request
    return bookstoreService.saveCustomer(bookstoreId, customerData); // save the customer
  }

  /**
   * Update an existing customer.
   *
   * @param bookstoreId  the ID of the bookstore the customer shops at
   * @param customerId   the ID of the customer to be updated
   * @param customerData the data of the customer to be updated
   * @return             the updated customer
   */
  // HTTP PUT (UPDATE) http://localhost:8080/bookstore/{bookstoreId}/customer/{customerId}
  @PutMapping("/{bookstoreId}/customer/{customerId}")
  public BookstoreCustomerData updateCustomer(@PathVariable long bookstoreId, @PathVariable long customerId, @RequestBody BookstoreCustomerData customerData) {
    customerData.setCustomerId(customerId); // set the customer's intended ID
    log.info("Updating customer with ID: " + customerId); // log the request
    return bookstoreService.saveCustomer(bookstoreId, customerData); // save the customer
  }

  /**
   * Get all customers and provide the user with a list of {@link BookstoreCustomerData}.
   *
   * @param bookstoreId the ID of the bookstore the customers shop at
   * @return            a list of all customers
   */
  // HTTP GET (READ) http://localhost:8080/bookstore/{bookstoreId}/customer
  @GetMapping("/{bookstoreId}/customer")
  public List<BookstoreCustomerData> getAllCustomersByBookstoreId(@PathVariable long bookstoreId) {
    return bookstoreService.getAllCustomers(bookstoreId); // get all and return
  }

  /**
   * Get a customer by their ID and provide the user with their {@link BookstoreCustomerData}.
   *
   * @param bookstoreId the ID of the bookstore the employee works at
   * @param customerId  the ID of the employee to be retrieved
   * @return            the customer's BookstoreCustomerData
   */
  // HTTP GET (READ) http://localhost:8080/bookstore/{bookstoreId}/customer/{customerId}
  @GetMapping("/{bookstoreId}/customer/{customerId}")
  public BookstoreCustomerData getCustomerById(@PathVariable long bookstoreId, @PathVariable long customerId) {
    return bookstoreService.getCustomer(bookstoreId, customerId); // find and return

  }

  /* *************************************
   * BOOKSTORE BOOKS METHODS             *
   * CRUD?: CREATE, READ, UPDATE, DELETE *
   * *************************************/

  /**
   * Create a new book using the {@link BookstoreBookData} provided.
   * <p>
   * The customer's ID is automatically generated by the database.
   * <p>
   * The BookstoreCustomerData is returned with the generated ID to the requester for reference
   * upon successful creation.
   *
   * @param bookstoreId the ID of the bookstore the book is sold at
   * @param bookstoreBookData    the data of the book to be created
   * @return            the created book
   */
  // HTTP POST (CREATE) - http://localhost:8080/bookstore
  // Response code: 201 (CREATED)
  @PostMapping("/{bookstoreId}/book")
  @ResponseStatus(code = HttpStatus.CREATED)
  public BookstoreBookData createBook(@PathVariable long bookstoreId, @RequestBody BookstoreBookData bookstoreBookData) {
    log.info("Creating & inserting a new book: " + bookstoreBookData); // log the request
    return bookstoreService.saveBook(bookstoreId, bookstoreBookData); // save the book
  }

  /**
   * Update an existing book.
   *
   * @param bookstoreId the ID of the bookstore the book is sold at
   * @param bookId      the ID of the book to be updated
   * @param bookstoreBookData    the data of the book to be updated
   * @return            the updated book
   */
  // HTTP PUT (UPDATE) http://localhost:8080/bookstore/{bookstoreId}/book/{bookId}
  @PutMapping("/{bookstoreId}/book/{bookId}")
  public BookstoreBookData updateBook(@PathVariable long bookstoreId, @PathVariable long bookId, @RequestBody BookstoreBookData bookstoreBookData) {
    bookstoreBookData.setBookId(bookId); // set the book's intended ID
    log.info("Updating book with ID: " + bookId); // log the request
    return bookstoreService.saveBook(bookstoreId, bookstoreBookData); // save the book
  }

  /**
   * Delete an existing book.
   *
   * @param bookstoreId the ID of the bookstore the book is sold at
   * @param bookId      the ID of the book to be deleted
   * @return            confirmation message
   */
  // HTTP DELETE (DELETE) http://localhost:8080/bookstore/{bookstoreId}/book/{bookId}
  @DeleteMapping("/{bookstoreId}/book/{bookId}")
  public Map<String, String> deleteBook(@PathVariable long bookstoreId, @PathVariable long bookId) {
    log.info("Deleting book with ID: " + bookId); // log the request
    bookstoreService.deleteBook(bookstoreId, bookId); // delete the book
    return Map.of("message", "Book with ID: " + bookId + " has been deleted successfully."); // return confirmation
  }

  /**
   * Get all books and provide the user with a list of {@link BookstoreBookData}.
   *
   * @param bookstoreId the ID of the bookstore the books are sold at
   * @return            a list of all books
   */
  // HTTP GET (READ) http://localhost:8080/bookstore/{bookstoreId}/book
  @GetMapping("/{bookstoreId}/book")
  public List<BookstoreBookData> getAllBooksByBookstoreId(@PathVariable long bookstoreId) {
    return bookstoreService.getAllBooks(bookstoreId); // get all and return
  }

  /**
   * Get a book by its ID and provide the user with its {@link BookstoreBookData}.
   *
   * @param bookstoreId the ID of the bookstore the book is sold at
   * @param bookId      the ID of the book to be retrieved
   * @return            the book's BookstoreData
   */
  // HTTP GET (READ) http://localhost:8080/bookstore/{bookstoreId}/book/{bookId}
  @GetMapping("/{bookstoreId}/book/{bookId}")
  public BookstoreBookData getBookById(@PathVariable long bookstoreId, @PathVariable long bookId) {
    return bookstoreService.getBook(bookstoreId, bookId); // find and return
  }

  /**
   * Get all books by genre and provide the user with a list of {@link BookstoreBookData}.
   *
   * @param bookstoreId the ID of the bookstore the books are sold at
   * @param genre       the genre of the books to be retrieved
   * @return            a list of all books by genre
   */
  // HTTP GET (READ) http://localhost:8080/bookstore/{bookstoreId}/{genre}
  @GetMapping("/{bookstoreId}/book/genre/{genre}")
  public List<BookstoreBookData> getAllBooksByGenre(@PathVariable long bookstoreId, @PathVariable String genre) {
    return bookstoreService.getAllBooksByGenre(bookstoreId, genre); // get all and return

  }
}
